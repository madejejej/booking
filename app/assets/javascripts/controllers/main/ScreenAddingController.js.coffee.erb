class CinemaScreen
  @width = 0
  @height = 0
  @name = ''

  SCREEN_FILL_STYLE = 'lightblue'
  BACKGROUND_FILL_STYLE = "black"
  INITIAL_SCALE_FACTOR = 1/20
  STRETCH_SCALE_FACTOR = 18/20

  SCREEN_TEXT_STYLE = { font: "2em Arial", fillStyle: "black", textAlign: "center" }
  SEAT_STYLE = { fillStyle: 'green', strokeStyle: 'black' }
  OTHER_STYLE = { font: '1em Arial', textAlign: 'center', fillStyle: 'black' }

  constructor: (context) ->
    @context = context
    @layout =
      columns: 1
      rows: 1

  setFillStyle: (fillStyle) ->
    @filLStyle = fillStyle

  updateSize: (width, height) ->
    @width = width
    @height = height
    
  draw: ->
    drawBackground()
    drawScreen()
    drawRoom()
    drawOther()

  drawBackground: ->
    @fillStyle = BACKGROUND_FILL_STYLE
    @context.rect(@width * INITIAL_SCALE_FACTOR, @height * INITIAL_SCALE_FACTOR,
      @width * STRETCH_SCALE_FACTOR, @height * STRETCH_SCALE_FACTOR)
    @context.fill()

  drawScreen: () ->
    context.fillStyle = SCREEN_FILL_STYLE
    context.fillRect(@width * INITIAL_SCALE_FACTOR, @height * INITIAL_SCALE_FACTOR,
      @width * STRETCH_SCALE_FACTOR, @height * STRETCH_SCALE_FACTOR)
    @context.font = SCREEN_TEXT_STYLE.font
    @context.fillStyle= SCREEN_TEXT_STYLE.fillStyle
    @context.textAlign = SCREEN_TEXT_STYLE.textAlign
    @context.fillText("Screen", @width/2, 2.5*@height/20)

  drawRoom: () ->
    for seat in @newSeats
      drawSeat(seat)

  drawSeat: (seat) ->
    rect = roomCoordToScreen(seat)
    @context.beginPath()
    @context.rect(rect.x, rect.y, rect.width, rect.height)
    @context.fillStyle = SEAT_STYLE.fillStyle
    @context.strokeStyle = SEAT_STYLE.strokeStyle
    @context.fill()
    @context.stroke()


  roomCoordToScreen: (coord) ->
    x = @width/20+ (STRETCH_SCALE_FACTOR*@width/@layout.columns)*coord.x - (STRETCH_SCALE_FACTOR*@width/@layout.columns)
    y = 5*@height/20 +(((14*@height)/20)/@layout.rows)*coord.y - ((14*@height)/20)/@layout.rows
    width = STRETCH_SCALE_FACTOR*@width/@layout.columns
    height = ((14*@height)/20)/@layout.rows
    rect =
      x: x,
      y: y,
      width: width,
      height: height
    return rect

  screenCoordToRoom: (coord) ->
    for row in [1..@layout.rows] by 1
      for col in [1..@layout.columns] by 1
        rect = roomCoordToScreen({x: col, y: row})
        if(coordInsideRect(coord, rect))
          return {x: col, y: row}

  coordInsideRect: (coord, rect) ->
    coord.x >= rect.x && coord.x < rect.x+rect.width && coord.y >= rect.y && coord.y < rect.y+rect.height

  drawOther: () ->
    @context.fillText(@layout.rows.toString(), @width/40, @height/2)
    @context.fillText(@layout.columns.toString(), @width/2, (39*@height)/40)

  select: (event) ->
    x = event.offsetX
    y = event.offsetY
    if(x is undefined)
      x = event.pageX-$('#seat-canvas').offset().left
      y = event.pageY-$('#seat-canvas').offset().top
    $scope.coord = screenCoordToRoom({x: x, y: y})
    find = null
    for i in [1..$scope.newSeats.length] by 1
      if($scope.newSeats[i-1].x == $scope.coord.x && $scope.newSeats[i-1].y == $scope.coord.y)
        find = $scope.newSeats[i-1]
    if find is null
      $scope.newSeats.push($scope.coord)
    else
      $scope.newSeats = $scope.newSeats.filter(
        (seat) ->
          !(seat.x==$scope.coord.x && seat.y==$scope.coord.y)
      )
    $scope.redraw()

    return


@controllers.controller( 'ScreenAddingController',
['$scope', '$modal', '$location', '$window', '$routeParams', 'SeatService', 'ScreenService'
($scope, $modal, $location, $window, $routeParams, SeatService, ScreenService) ->
  window.scope = $scope
  $scope.newSeats = []
  $scope.canvas = document.getElementById("seat-canvas")
  $scope.context = $scope.canvas.getContext("2d")
  $scope.screen = new CinemaScreen($scope.context)

  $scope.redraw = () ->
    $scope.screen.updateSize($('#seat-canvas-container').width(), $('#seat-canvas-container').height())
    drawRoom()
    drawOther()

  $scope.reset = () ->
    $scope.newSeats = []
    for row in [1..$scope.screen.layout.rows]
      for col in [1..$scope.screen.layout.columns]
        $scope.newSeats.push
          y: row,
          x: col
    $scope.redraw()

  $scope.createScreen = () ->
    success = (success) ->
      createSeats(success)
    failure = (failure) ->
      $modal.open(
        templateUrl: '<%= asset_path("modals/sadModal.html") %>',
        controller: 'SimpleDialogController'
      ).result.then(() ->
          $location.path("/cinemas/#{$routeParams.cinema_id}/screens")
      )
    ScreenService.createScreen(
      $routeParams.cinema_id,
      $scope.screen,
      success
      failure
    )
  createSeats = (response) ->
    success = (success) ->
      $modal.open(
        templateUrl: '<%= asset_path("modals/happyModal.html") %>',
        controller: 'SimpleDialogController'
      ).result.then(() ->
        $location.path("/cinemas/#{$routeParams.cinema_id}/screens")
      )
    failure = (failure) ->
      $modal.open(
        templateUrl: '<%= asset_path("modals/sadModal.html") %>',
        controller: 'SimpleDialogController'
      ).result.then(() ->
        $location.path("/cinemas/#{$routeParams.cinema_id}/screens")
      )
    SeatService.createSeats(
      $routeParams.cinema_id,
      response.id,
      $scope.newSeats,
      $scope.screen.layout,
      success,
      failure
    )



  angular.element($window).bind 'resize', $scope.redraw
  $scope.reset()
  $scope.redraw()
])
